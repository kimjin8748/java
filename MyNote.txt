package swing.note;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JToolBar;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

public class MyNote extends JFrame implements ActionListener {
	
	private JMenuItem itemExit;
	private JMenuItem itemInfo;
	private JMenuItem itemOpen;
	private RSyntaxTextArea textArea;
	private JMenuItem itemSave;
	private JMenuItem itemCalc;
	
	
	private ImageIcon[] imgs = {
			new ImageIcon("images/new.png"),	
			new ImageIcon("images/open.png"),
			new ImageIcon("images/save.png"),	
			new ImageIcon("images/exit.png")	
		};
	
	private JButton btnNew;
	private JButton btnOpen;
	private JButton btnSave;
	private JButton btnExit;
	private JMenuItem itemNew;
	
	public MyNote(String title) {
		setTitle(title);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(500, 400);
		setLocationRelativeTo(null);
		setLayout(new BorderLayout());
		
		setMenueBar(); //메뉴바
		
		setToolBar();
		
		setPanCenter(); //가운데 내용
		
		setVisible(true);
	}
	private void setToolBar() {
		JToolBar toolBar = new JToolBar("내 툴바");
		
		btnNew = new JButton(imgs[0]);
		btnNew.addActionListener(this);
		toolBar.add(btnNew);
		
		btnOpen = new JButton(imgs[1]);
		btnOpen.addActionListener(this);
		toolBar.add(btnOpen);
		
		btnSave = new JButton(imgs[2]);
		btnSave.addActionListener(this);
		toolBar.add(btnSave);
		
		toolBar.addSeparator();
		
		btnExit = new JButton(imgs[3]);
		btnExit.addActionListener(this);
		btnExit.setToolTipText("프로그램을 종료합니다");
		toolBar.add(btnExit);
		
		add(toolBar, BorderLayout.NORTH);
		
	}
	private void setPanCenter() {
		JPanel panCenter = new JPanel();
		panCenter.setBackground(Color.white);
		panCenter.setLayout(new BorderLayout());
		
		textArea = new RSyntaxTextArea();
		textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
		RTextScrollPane scrollPane = new RTextScrollPane(textArea);
		
//		textArea = new JTextArea();
//		JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
//				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//		
		panCenter.add(scrollPane);
		add(panCenter);
		
	}
	private void setMenueBar() {
		JMenuBar menuBar = new JMenuBar();
		JMenu menuFile = new JMenu("File");
		
		itemNew = new JMenuItem("New");
		itemNew.addActionListener(this);
		menuFile.add(itemNew);
		
		itemOpen = new JMenuItem("Open");
		itemOpen.addActionListener(this);
		menuFile.add(itemOpen);
		
		itemSave = new JMenuItem("Save");
		itemSave.addActionListener(this);
		menuFile.add(itemSave);
		
		menuFile.addSeparator();//구분하는 선을 추가하는 작업
		
		itemExit = new JMenuItem("Exit");
		itemExit.addActionListener(this);
		menuFile.add(itemExit);
		
		menuBar.add(menuFile);
		
		JMenu menuOption = new JMenu("Option");
		
		JMenuItem itemFont = new JMenuItem("Font");
		menuOption.add(itemFont);
		menuOption.addSeparator();
		itemCalc = new JMenuItem("계산기");
		itemCalc.addActionListener(this);
		menuOption.add(itemCalc);
		
		menuBar.add(menuOption);
		
		JMenu menuInfo = new JMenu("Info");
		
		itemInfo = new JMenuItem("Program Info.");
		itemInfo.addActionListener(this);
		menuInfo.add(itemInfo);
		
		menuBar.add(menuInfo);
		
		
		setJMenuBar(menuBar);//메뉴바를 보이게 하는 작업
	}
	public static void main(String[] args) {
		new MyNote("MyNote ver0.5");
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();
		
		if(obj == itemExit || obj == btnExit) {
			if(JOptionPane.showConfirmDialog(this, "정말 나갈까요?", "종류 확인", 
					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
				System.exit(0);
			}
		} else if(obj == itemInfo) {
			JOptionPane.showMessageDialog(this, "간단 메모장 by 김용진", "프로그램 정보", 
					JOptionPane.INFORMATION_MESSAGE); // this로 하는 이유는 부모의 위에 띄우게 하기 위해서
		} else if(obj == itemOpen || obj == btnOpen) {
			fileOpen();
		} else if(obj == itemSave || obj == btnSave) {
			fileSaver();
		} else if (obj == itemCalc) { 
			new CalcFrame("CalcFram");// 다른 작업을 한 폼을 띄우는 작업
		} else if(obj == itemNew || obj == btnNew) {
			fileSaver();
			textArea.setText("");
		}
		
		
		
	}
	private void fileSaver() {
		JFileChooser fileSaveChooser = new JFileChooser();
		fileSaveChooser.showSaveDialog(null);
		
		File out = fileSaveChooser.getSelectedFile();
		BufferedWriter bw = null;
		
		try {
			bw = new BufferedWriter(new FileWriter(out));
			String str = textArea.getText();
			str = str.replace("\n", System.getProperty("line.sperator"));
			bw.write(str);
			
		} catch (IOException e1) {
			
			e1.printStackTrace();
		} finally {
			try {
				bw.close();
			} catch (IOException e1) {
				
				e1.printStackTrace();
			}
		}
	}
	private void fileOpen() {
		JFileChooser fc = new JFileChooser();
		fc.addChoosableFileFilter(new FileNameExtensionFilter("Text", "txt"));
		fc.addChoosableFileFilter(new FileNameExtensionFilter("이미지", "jpg", "png", "gif", "bmp"));
		
		
		fc.showOpenDialog(null);
		//위의 두줄로 파일을 열수 있음
		File selectedFile = fc.getSelectedFile();
		
		BufferedReader reader = null;
		String line = null;
		
		try {
			reader = new BufferedReader(new FileReader(selectedFile));
			while((line = reader.readLine()) != null) {
				textArea.append(line + "\n"); // textArea에 가져다 붙이는 작업
			}
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
